{"version":3,"file":"static/js/403.750e0f81.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/MoviesGallery/MoviesGallery.styled.jsx","components/MoviesGallery/MoviesGallery.jsx","components/PageHeading/PageHeading.slyled.jsx","components/PageHeading/PageHeading.jsx","services/moviesApi.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","views/MoviesPageView/MoviesPageView.jsx","hooks/usePrevious.jsx","utils/notifications.jsx","views/MoviesPageView/MoviesPageView.styled.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieItem = styled.li`\n  overflow: hidden;\n  color: #ffffff;\n  background-color: #333333;\n  box-shadow: 0px 1px 3px 0px rgba(237, 70, 47, 0.2),\n    0px 1px 1px 0px rgba(237, 70, 47, 0.14),\n    0px 2px 1px -1px rgba(237, 70, 47, 0.12);\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  display: flex;\n`;\n\nexport const MovieImg = styled.img`\n  width: 186.66px;\n  height: 280px;\n  object-fit: contain;\n`;\n\nexport const InfoWrapper = styled.div`\n  margin: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nexport const MovieName = styled.h3`\n  width: 172px;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  font-size: 16px;\n  line-height: 26px;\n`;\n\nexport const Line = styled.hr`\n  width: 172px;\n  border: 1px solid #ed462f;\n`;\n\nexport const MovieRelease = styled.span`\n  font-size: 16px;\n  text-align: center;\n`;\n\nexport const MovieRating = styled.span`\n  font-size: 16px;\n  text-align: center;\n`;\n\nexport const VoteNum = styled.div`\n  font-weight: 600;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  MovieItem,\n  MovieLink,\n  MovieImg,\n  InfoWrapper,\n  MovieName,\n  MovieRelease,\n  MovieRating,\n  Line,\n  VoteNum,\n} from './MovieCard.styled';\nimport defaultPoster from '../../images/noPoster.png';\n\nexport default function MovieCard({\n  id,\n  poster_path,\n  release_date,\n  title,\n  vote_average,\n}) {\n  const releaseDate = new Date(release_date);\n\n  return (\n    <MovieItem id={id}>\n      <MovieLink to={`/movies/${id}`}>\n        <MovieImg\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : defaultPoster\n          }\n          alt={title}\n        />\n        <InfoWrapper>\n          <MovieName>\n            {title}\n            <Line />\n          </MovieName>\n          <MovieRelease>\n            Release date:\n            <br />\n            {release_date !== 0 ? releaseDate.toLocaleDateString() : 'unknown'}\n          </MovieRelease>\n          <MovieRating>\n            IMDb Rating:\n            <VoteNum>{vote_average !== 0 ? vote_average : 'unrated'}</VoteNum>\n          </MovieRating>\n        </InfoWrapper>\n      </MovieLink>\n    </MovieItem>\n  );\n}\n\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  poster_path: PropTypes.string,\n  release_date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import PropTypes from 'prop-types';\nimport MovieCard from 'components/MovieCard';\nimport { MoviesList } from './MoviesGallery.styled';\n\nexport default function MoviesGallery({ moviesSet }) {\n  return (\n    <MoviesList>\n      {moviesSet.map(({ id, ...props }) => (\n        <MovieCard key={id} id={id} {...props} />\n      ))}\n    </MoviesList>\n  );\n}\n\nMoviesGallery.propTypes = {\n  moviesSet: PropTypes.array.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const PageTitle = styled.h1`\n  padding: 30px 0;\n  line-height: 58px;\n  letter-spacing: 10px;\n  text-transform: uppercase;\n  font-weight: 500;\n  font-size: 56px;\n  color: #2a2a2a;\n`;\n","import PropTypes from 'prop-types';\nimport { PageTitle } from './PageHeading.slyled';\n\nexport default function PageHeading({ text }) {\n  return <PageTitle>{text}</PageTitle>;\n}\n\nPageHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8f3b565dfa705a44083795264ed307ec';\n\nasync function fetchMoviesData(url = '', config = {}) {\n  try {\n    const response = await axios.get(url, config);\n    return response;\n  } catch (error) {\n    console.log(error.message);\n    Promise.reject(new Error('Not found'));\n  }\n}\n\nexport async function fetchTrendingMovies() {\n  return await fetchMoviesData(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport async function fetchSearchMovie(searchQuery) {\n  return await fetchMoviesData(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n}\n\nexport async function fetchMovieDetails(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const QueryForm = styled.form`\n  display: flex;\n  align-items: center;\n  margin: 10px auto 30px auto;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 1px solid #b3b1b1;\n  box-shadow: 0 8px 6px -6px black;\n`;\n\nexport const QueryFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const QueryFormBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  background-color: #b3b1b1;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const QueryFormBtnLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { IconContext } from 'react-icons';\nimport { MdSearch } from 'react-icons/md';\nimport {\n  QueryForm,\n  QueryFormInput,\n  QueryFormBtn,\n  QueryFormBtnLabel,\n} from './SearchForm.styled';\n\nexport default function SearchForm({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const formReset = () => {\n    setSearchQuery('');\n  };\n\n  const onInputChange = evt => {\n    const normalizeInputValue = evt.currentTarget.value.toLowerCase();\n    setSearchQuery(normalizeInputValue);\n  };\n\n  const onSearch = evt => {\n    evt.preventDefault();\n    onSubmit(searchQuery);\n    formReset();\n  };\n\n  return (\n    <QueryForm onSubmit={onSearch}>\n      <QueryFormInput\n        type=\"text\"\n        name=\"search\"\n        autocomplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={searchQuery}\n        onChange={onInputChange}\n      />\n      <QueryFormBtn type=\"submit\" aria-label=\"Search movies\">\n        <IconContext.Provider value={{ size: '2.5em' }}>\n          <MdSearch />\n        </IconContext.Provider>\n        <QueryFormBtnLabel>Search</QueryFormBtnLabel>\n      </QueryFormBtn>\n    </QueryForm>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport usePrevious from 'hooks/usePrevious';\nimport { fetchSearchMovie } from 'services/moviesApi';\nimport * as notify from 'utils/notifications';\nimport PageHeading from 'components/PageHeading';\nimport SearchForm from 'components/SearchForm';\nimport MoviesGallery from 'components/MoviesGallery';\nimport { TextWrapper, WelcomeText } from './MoviesPageView.styled';\n\nexport default function MoviesPageView() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const prevSearchQuery = usePrevious(searchQuery);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    fetchSearchMovie(searchQuery)\n      .then(response => {\n        const { results, total_results } = response.data;\n\n        if (total_results === 0) {\n          notify.showIncorrectQuery(searchQuery);\n          moviesReset();\n          return;\n        }\n\n        notify.showSearchResult(total_results);\n        setMovies(results);\n      })\n      .catch(error => {\n        return notify.showQueryError(error);\n      });\n  }, [searchQuery]);\n\n  const moviesReset = () => {\n    setMovies([]);\n  };\n\n  const onFormSubmit = searchQuery => {\n    if (searchQuery === '') {\n      notify.showSearchQueryAbsence();\n      return;\n    }\n\n    if (prevSearchQuery === searchQuery) {\n      notify.showSearchQueryRepeat(searchQuery);\n      return;\n    }\n\n    setSearchQuery(searchQuery);\n    moviesReset();\n  };\n\n  return (\n    <>\n      <PageHeading text=\"Movies\" />\n      <SearchForm onSubmit={onFormSubmit} />\n      {movies.length > 0 ? (\n        <MoviesGallery moviesSet={movies} />\n      ) : (\n        <TextWrapper>\n          <WelcomeText>\n            All filmmakers are waiting for your search query to show movies.\n          </WelcomeText>\n        </TextWrapper>\n      )}\n    </>\n  );\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","import toast from 'react-hot-toast';\n\nexport const showSearchQueryAbsence = () => {\n  toast(\n    'No, no, no! God, no! To search for movies you need to specify what you are looking for.',\n    {\n      icon: '🤦‍♂️',\n    }\n  );\n};\n\nexport const showSearchQueryRepeat = searchQuery => {\n  toast(\n    `Bro, you already found all the movies on the query \"${searchQuery}\".`,\n    {\n      icon: '🙅‍♂️',\n    }\n  );\n};\n\nexport const showSearchResult = totalResults => {\n  toast(`Hooray! We found ${totalResults} movies for you.`, {\n    icon: '🤟',\n  });\n};\n\nexport const showIncorrectQuery = searchQuery => {\n  toast(\n    `Sorry, there are no movies matching your query: \"${searchQuery}\". Please try to search something else.`,\n    {\n      icon: '🤷‍♂️',\n    }\n  );\n};\n\nexport const showQueryError = error => {\n  toast(`You caught the following error: ${error.message}.`, {\n    icon: '🐷',\n  });\n};\n","import styled from '@emotion/styled';\n\nexport const TextWrapper = styled.div`\n  width: 720px;\n  margin: 100px auto 0 auto;\n`;\n\nexport const WelcomeText = styled.p`\n  font-size: 42px;\n  letter-spacing: 3px;\n  text-align: center;\n  color: #2a2a2a;\n`;\n"],"names":["MovieItem","styled","MovieLink","Link","MovieImg","InfoWrapper","MovieName","Line","MovieRelease","MovieRating","VoteNum","MovieCard","id","poster_path","release_date","title","vote_average","releaseDate","Date","to","src","defaultPoster","alt","toLocaleDateString","MoviesList","MoviesGallery","moviesSet","map","props","PageTitle","PageHeading","text","BASE_URL","API_KEY","fetchMoviesData","url","config","axios","response","console","log","message","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","QueryForm","QueryFormInput","QueryFormBtn","QueryFormBtnLabel","SearchForm","onSubmit","useState","setSearchQuery","evt","preventDefault","type","name","autocomplete","autoFocus","placeholder","value","onChange","normalizeInputValue","currentTarget","toLowerCase","size","MoviesPageView","movies","setMovies","prevSearchQuery","ref","useRef","useEffect","current","usePrevious","then","totalResults","data","results","total_results","toast","icon","notify","moviesReset","catch","error","length","TextWrapper","WelcomeText"],"sourceRoot":""}