{"version":3,"file":"static/js/726.857129aa.chunk.js","mappings":"sLAEaA,E,QAAYC,EAAAA,GAAH,qL,SCCP,SAASC,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,SAACH,EAAD,UAAYG,M,0MCFfC,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA+BC,EAA/B,+BAAqC,GAAIC,EAAzC,+BAAkD,GAAlD,kBAE2BC,IAAAA,IAAUF,EAAKC,GAF1C,cAEUE,EAFV,yBAGWA,GAHX,gCAKIC,QAAQC,IAAI,KAAMC,SAClBC,QAAQC,OAAO,IAAIC,MAAM,cAN7B,iFAUO,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQX,EAAgB,GAAD,OACvBF,EADuB,uCACgBC,IAFvC,0GAMA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,iFACQb,EAAgB,GAAD,OACvBF,EADuB,iCACUC,EADV,iCAC0Cc,EAD1C,gCADvB,0GAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,iFACQf,EAAgB,GAAD,OACvBF,EADuB,kBACLiB,EADK,oBACchB,EADd,oBADvB,0GAMA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,iFACQf,EAAgB,GAAD,OACvBF,EADuB,kBACLiB,EADK,4BACsBhB,EADtB,oBADvB,0GAMA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,iFACQf,EAAgB,GAAD,OACvBF,EADuB,kBACLiB,EADK,4BACsBhB,EADtB,oBADvB,4G,0ICjCQ,SAASmB,IACtB,IAAMH,GAAYI,EAAAA,EAAAA,MAAZJ,QACAK,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAkBC,GAASW,MAAK,SAAAtB,GAAQ,OAAIoB,EAASpB,EAASuB,WAC7D,CAACZ,IAEJ,IAGEa,EAOEL,EAPFK,YACAC,EAMEN,EANFM,OACAC,EAKEP,EALFO,SACAC,EAIER,EAJFQ,aACAC,EAGET,EAHFS,OACAC,EAEEV,EAFFU,MACAC,EACEX,EADFW,aAGF,OACE,iCACE,SAAC,IAAD,CAAarC,KAAK,wBAClB,mBAAQsC,QAfG,kBAAMf,GAAU,IAe3B,qBACCG,IACC,gCACGK,IACC,gBACEQ,IAAG,yCAAoCR,GACvCS,IAAKJ,KAGT,wBAAKA,KACL,kBACCJ,IACC,wBACGA,EAAOS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,wBAAcA,GAALD,SAIf,uBAAIP,KACJ,uBAAID,KACJ,uBAAIG,KACJ,uBAAIJ,KAEJ,mBACA,SAAC,KAAD,CAASW,GAAG,OAAZ,mBACA,SAAC,KAAD,CAASA,GAAG,UAAZ,sBACA,mBAGA,SAAC,KAAD","sources":["components/PageHeading/PageHeading.slyled.jsx","components/PageHeading/PageHeading.jsx","services/moviesApi.jsx","views/MovieDetailsPageView/MovieDetailsPageView.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const PageTitle = styled.h1`\n  padding: 30px 0;\n  line-height: 58px;\n  letter-spacing: 10px;\n  text-transform: uppercase;\n  font-weight: 500;\n  font-size: 56px;\n  color: #2a2a2a;\n`;\n","import PropTypes from 'prop-types';\nimport { PageTitle } from './PageHeading.slyled';\n\nexport default function PageHeading({ text }) {\n  return <PageTitle>{text}</PageTitle>;\n}\n\nPageHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8f3b565dfa705a44083795264ed307ec';\n\nasync function fetchMoviesData(url = '', config = {}) {\n  try {\n    const response = await axios.get(url, config);\n    return response;\n  } catch (error) {\n    console.log(error.message);\n    Promise.reject(new Error('Not found'));\n  }\n}\n\nexport async function fetchTrendingMovies() {\n  return await fetchMoviesData(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport async function fetchSearchMovie(searchQuery) {\n  return await fetchMoviesData(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n}\n\nexport async function fetchMovieDetails(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { NavLink, useParams, useNavigate, Outlet } from 'react-router-dom';\nimport { fetchMovieDetails } from 'services/moviesApi';\nimport PageHeading from 'components/PageHeading';\n// import Loader from 'components/Loader';\n\nexport default function MovieDetailsPageView() {\n  let { movieId } = useParams();\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    fetchMovieDetails(movieId).then(response => setMovie(response.data));\n  }, [movieId]);\n\n  const goBack = () => navigate(-1);\n\n  const {\n    poster_path,\n    genres,\n    overview,\n    release_date,\n    status,\n    title,\n    vote_average,\n  } = movie;\n\n  return (\n    <>\n      <PageHeading text=\"Movie Details Page\" />\n      <button onClick={goBack}>Go back</button>\n      {movie && (\n        <>\n          {poster_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n              alt={title}\n            />\n          )}\n          <h2>{title}</h2>\n          <ul></ul>\n          {genres && (\n            <ul>\n              {genres.map(({ id, name }) => (\n                <li key={id}>{name}</li>\n              ))}\n            </ul>\n          )}\n          <p>{status}</p>\n          <p>{release_date}</p>\n          <p>{vote_average}</p>\n          <p>{overview}</p>\n\n          <hr />\n          <NavLink to=\"cast\">Cast</NavLink>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n          <hr />\n\n          {/* <Suspense fallback={<Loader />}> */}\n          <Outlet />\n          {/* </Suspense> */}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["PageTitle","styled","PageHeading","text","BASE_URL","API_KEY","fetchMoviesData","url","config","axios","response","console","log","message","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","MovieDetailsPageView","useParams","navigate","useNavigate","useState","movie","setMovie","useEffect","then","data","poster_path","genres","overview","release_date","status","title","vote_average","onClick","src","alt","map","id","name","to"],"sourceRoot":""}